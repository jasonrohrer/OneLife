#!/bin/sh

git fetch
latestTaggedVersionA=`git for-each-ref --sort=-creatordate --format '%(refname:short)' --count=1 refs/tags | sed -e 's/OneLife_v//'`
git checkout -q OneLife_v$latestTaggedVersionA

git submodule update --init --recursive
cd minorGems
git fetch
latestTaggedVersion=`git for-each-ref --sort=-creatordate --format '%(refname:short)' --count=1 refs/tags | sed -e 's/OneLife_v//'`
git checkout -q OneLife_v$latestTaggedVersion

cd ../OneLifeData7
git fetch
latestTaggedVersionB=`git for-each-ref --sort=-creatordate --format '%(refname:short)' --count=1 refs/tags | sed -e 's/OneLife_v//'`
git checkout -q OneLife_v$latestTaggedVersionB

latestVersion=$latestTaggedVersionB

if [ $latestTaggedVersionA -gt $latestTaggedVersionB ]
then
	latestVersion=$latestTaggedVersionA
fi

cd ..


if [ ! -h animations ]
then
	ln -s OneLifeData7/animations .	
fi


if [ ! -h categories ]
then
	ln -s OneLifeData7/categories .	
fi


if [ ! -h ground ]
then
	ln -s OneLifeData7/ground .	
fi


if [ ! -h music ]
then
	ln -s OneLifeData7/music .	
fi


if [ ! -h objects ]
then
	ln -s OneLifeData7/objects .	
fi


if [ ! -h sounds ]
then
	ln -s OneLifeData7/sounds .	
fi


if [ ! -h sprites ]
then
	ln -s OneLifeData7/sprites .	
fi


if [ ! -h transitions ]
then
	ln -s OneLifeData7/transitions .	
fi


if [ ! -h dataVersionNumber.txt ]
then
	ln -s OneLifeData7/dataVersionNumber.txt .	
fi




cp build/source/runToBuild .


./runToBuild 1



echo
echo
echo "Done building v$latestVersion"
